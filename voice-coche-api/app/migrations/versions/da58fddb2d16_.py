"""empty message

Revision ID: da58fddb2d16
Revises: b813c5983b99
Create Date: 2024-05-19 14:58:09.784944

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'da58fddb2d16'
down_revision = 'b813c5983b99'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task')
    op.drop_table('class_assignment')
    op.drop_table('class')
    op.drop_table('task_project')
    op.drop_constraint('analysis_sessionId_fkey', 'analysis', type_='foreignkey')
    op.drop_column('analysis', 'sessionId')
    op.drop_constraint('notification_task_project_id_fkey', 'notification', type_='foreignkey')
    op.drop_constraint('notification_class_id_fkey', 'notification', type_='foreignkey')
    op.drop_column('notification', 'class_id')
    op.drop_column('notification', 'task_project_id')
    op.add_column('project', sa.Column('sample_url', sa.String(length=255), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('project', 'sample_url')
    op.add_column('notification', sa.Column('task_project_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('notification', sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('notification_class_id_fkey', 'notification', 'class', ['class_id'], ['id'])
    op.create_foreign_key('notification_task_project_id_fkey', 'notification', 'task_project', ['task_project_id'], ['id'])
    op.add_column('analysis', sa.Column('sessionId', sa.INTEGER(), autoincrement=False, nullable=False))
    op.create_foreign_key('analysis_sessionId_fkey', 'analysis', 'task', ['sessionId'], ['id'])
    op.create_table('task_project',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at_task_project', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['project.id'], name='task_project_id_fkey'),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], name='task_project_task_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_project_pkey')
    )
    op.create_table('class',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('class_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['teacher_id'], ['user.id'], name='class_teacher_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='class_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('class_assignment',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['class_id'], ['class.id'], name='class_assignment_class_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='class_assignment_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'class_id', name='class_assignment_pkey')
    )
    op.create_table('task',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sample', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['class_id'], ['class.id'], name='task_class_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_pkey')
    )
    # ### end Alembic commands ###
